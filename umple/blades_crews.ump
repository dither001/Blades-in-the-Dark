strictness allow 170;

namespace com.blades.main;

/* */
/* CREW */
/* */
class Crew {
	depend java.util.concurrent.atomic.AtomicInteger;
	depend java.util.concurrent.atomic.AtomicLong;
	depend java.util.concurrent.ArrayBlockingQueue;
	depend java.util.concurrent.BlockingQueue;
	depend java.util.function.Predicate;
	depend java.util.stream.Collectors;
	depend java.util.stream.Stream;

	depend com.blades.util.Util;

	/* */
	const int MAX_HEAT = 9;
	const CITIZENRY = "citizenry"; const FRINGE = "fringe"; const INSTITUTION = "institution"; const TRADEMEN = "tradesmen"; const UNDERWORLD = "underworld";

	/* UNIQUE SET-STREAM */
	const Set<Crew> SET = new HashSet<Crew>();
	after constructor { SET.add(this); } after delete { SET.remove(this); }
	private static Stream<Crew> getStream() { return SET.stream(); }

	/* */
	lazy UUID id; before getId { if (Util.unless(id)) setId(Util.nextUUID()); } key { id }
	name; state;
	int rep = 0; int tier; int heat = 0; int wanted = 0; int coin;
	boolean hold; boolean alive = true; boolean agent = false;
	lazy Score score;

	1 crew <@>- * Rogue rogues;
	0..1 -> 0..* Aspect aspects;
	0..1 -> 0..* Activity favoredOps;
	0..1 crew <@>- * Locale turf;
	0..1 patron -- 0..* Crew vassals;

	/* derived attributes */
	boolean isBoss = { isLocalBoss() && Util.unless(hasPatron()) }
	boolean hasBoss = { hasPatron() || Util.unless(getIsBoss()) || Util.unless(isLocalBoss()) }

	boolean atWar = { CrewShip.atWar(this) }
	boolean lookingForWork = { Util.unless(score) }

	/** Primary means for determining crew's hold.
	* @return boolean modified by whether crew is at war. */
	boolean currentHold = { getAtWar() ? hold ? false : hold : hold }

	/** Primary means for determining crew's tier. 
	* @return int modified by whether crew is at war and has strong/weak hold. */
	int currentTier = { getAtWar() ? hold ? tier : tier - 1 : tier }

	/* aspect orientation */
	after setCoin {
		if (coin > 4) {
			final AtomicInteger distrib = new AtomicInteger(coin);
			getRogues().stream().sorted((r1,r2) -> Integer.compare(r1.getCoin(), r2.getCoin())).forEach(e -> {
				int value = distrib.decrementAndGet() > 0 ? 1 : 0;
				e.setCoin(e.getCoin() + value);
			});
			if (distrib.get() > 0) coin -= distrib.get();
		}
	}
	
	after setHeat {
		if (heat >= MAX_HEAT) {
			int delta = heat / MAX_HEAT;
			setWanted(getWanted() + delta);
			heat -= delta * MAX_HEAT;
		}
	}
	
	/* */
	public static void initialize() {
		setupReputation();
		setupLairs();
		setupHuntingGrounds();
		setupUpgrades();
		setupContacts();
	}
	
	private static void setupContacts() {
		final AtomicLong skip = new AtomicLong(0);
		final long count = Rogue.getRogues().count();

		getCrews().forEach(e -> {
			Set<Rogue> unavailable = e.getRogues().stream()
					.flatMap(r -> r.getCircle().stream())
					.collect(Collectors.toSet());
			e.getRogues().forEach(unavailable::add);
			long mod = count - unavailable.size();
			
			Rogue r1 = Rogue.getRogues().filter(r -> Util.unless(unavailable.contains(r))).skip(skip.incrementAndGet() % mod).findFirst().get();
			Rogue r2 = Rogue.getRogues().filter(r -> Util.unless(unavailable.contains(r))).skip(skip.incrementAndGet() % mod).findFirst().get();

			new CrewRogueShip(Aspect.CONTACT, e, r1);
			new CrewRogueShip(Aspect.CONTACT, e, r2);
		});
	}

	private static void setupHuntingGrounds() {
		getCrews().filter(c -> Util.unless(c.hasHuntingGround())).forEach(c -> {
			Locale l = new Locale(Locale.nextCommonBuilding());
			l.setZoning(new Zoning(Zoning.PURPOSE));
			l.setCrew(c);
			l.setIsHuntingGround(true);
			l.setParent(Locale.nextDistrict());
		});
	}
	
	private static void setupLairs() {
		getCrews().filter(c -> Util.unless(c.hasLair())).forEach(c -> {
			Locale l = new Locale(Locale.nextCommonBuilding());
			l.setZoning(new Zoning(Zoning.PURPOSE));
			l.setCrew(c);
			l.setIsLair(true);
			l.setParent(Locale.nextDistrict());
		});
	}
	
	private static void setupReputation() {
		final BlockingQueue<Aspect> queue = new ArrayBlockingQueue<Aspect>(17, true, Aspect.getReputations());
		getCrews().forEach(e -> { Aspect aspect = queue.poll(); e.addAspect(aspect); queue.add(aspect); });
	}
	
	private static void setupUpgrades() {
	    final BlockingQueue<Aspect> aspects = new ArrayBlockingQueue<Aspect>(11, true, Aspect.getUpgrades());
	    getCrews().forEach(e -> {
			Set<Crew> crews = e.getCrewShips().stream()
					.map(f -> f.getOther(e))
					.collect(Collectors.toSet());
			crews.add(e);

			List<Crew> available = Crew.getCrews()
					.filter(f -> Util.unless(crews.contains(f)))
					.sorted((c1, c2) -> Integer.compare(c1.numberOfCrewShips(), c2.numberOfCrewShips()))
					.collect(Collectors.toList());
			
			Aspect a1 = aspects.poll(); e.addAspect(a1); aspects.add(a1);
			new CrewShip(1, e, available.remove(0));
			Aspect a2 = aspects.poll(); e.addAspect(a2); aspects.add(a2);
			new CrewShip(-1, e, available.remove(0));
		});
	}

	/* instance */
	public CrewShip getShip(Crew crew, int value) {
		return getCrewShips().stream().filter(ship -> ship.contains(crew)).findFirst()
				.orElse(CrewShip.newCrewShip(value, this, crew));
	}

	private Crew getLocalBoss() { return Util.ensure(hasLadder())? getLadder().getBoss(): null; }
	private boolean isLocalBoss() { return Util.ensure(getLocalBoss()) ? getLocalBoss().equals(this): false; }
	
	public Stream<Rogue> getRoster() { return rogues.stream(); }
	public Stream<Rogue> getAvailableRogues() { return rogues.stream().filter(Predicate.not(Rogue::getTapped)); }
	public int turfCount() { return (int) getTurf().stream().filter(Locale::getIsTurf).count(); }
	public Locale getLair() {  return getTurf().stream().filter(Locale::getIsLair).findFirst().orElse(null);  }
	public boolean hasLair() { return turf.stream().anyMatch(Locale::getIsLair); }
	public boolean hasHuntingGround() { return turf.stream().anyMatch(Locale::getIsHuntingGround); }
	public List<Locale> getHuntingGround() { return getTurf().stream().filter(Locale::getIsHuntingGround).collect(Collectors.toList()); }
	public boolean hasScore() { return Util.ensure(score); }
	
	void lookForWork() {
		Opportunity opp = Opportunity.next(this);
		if (Util.ensure(opp)) {
			/* System.out.println(name + " found work"); */
			int potentialRep = 2 - (getCurrentTier() - opp.getTarget().getTier());

			Plan plan = plan(activity(objectify(opp)), new Approach(Approach.DECEPTION));
			getRogues().forEach(plan::addTeam);
			opp.getTarget().getCrewShips().forEach(plan::addInterestedParty);
			Score newScore = new Score(this, opp, plan, null);
			newScore.setCrew(this);
			setScore(newScore);
		}
	}
	
	public void advance() {
		int turf = (int) getTurf().stream().filter(e -> e.getIsTurf()).count();
		int threshold = 12 - turf;
		boolean advance = rep >= threshold;
		int advanceCost = ((getTier()+1) * 8);
		boolean kitty = getRogues().stream().map(e -> e.getCoin() + (e.getStash()/2)).reduce(0, Integer::sum) >= advanceCost;

		if (advance && kitty) {
			System.out.println(String.format("%s is attempting to advance (%s in vault)", getName(), getCoin()));
			PriorityQueue<Rogue> queue = new PriorityQueue<Rogue>(11,
					(r1, r2) -> Integer.compare((r2.getCoin()+r2.getStash()) , (r1.getCoin()+r1.getStash())));
			getRogues().forEach(queue::add);

			if (getHold()) {
				int crewpay = getCoin(); setCoin(0);
				for (int i = crewpay; i < advanceCost;) {
					Rogue r = queue.poll();
					
					if (r.getCoin() > 0) { 
						System.out.println(String.format("%s paid 1 from %s coin (%s remaining)", r.getRoguename(), r.getCoin(), advanceCost-i));
						r.setCoin(r.getCoin() -1); i += 1; }
					else if (r.getStash() > 1) { 
						System.out.println(String.format("%s paid 2 from %s stash (%s remaining)", r.getRoguename(), r.getStash(), advanceCost-i));
						r.setStash(r.getStash() -2); i += 1; }
					
					if (r.getCoin() > 0 || r.getStash() > 1) { queue.add(r); }
				}
				setTier(getTier() +1);
				setHold(false);
				rep -= threshold;
			} else {
				System.out.println(String.format("Improved hold", getName()));
				setHold(true);
				rep -= threshold;
			}
		}
	}

	void payoff(Score score) {
		int coin = score.getCoin();
		int team = score.getTeam().size();

		/* */
		Crew boss = getHasBoss()? getLadder().getBoss() : null;
		int tithe = Util.ensure(boss) ? getCurrentTier() + 1 : 0;
		boolean canTithe = Util.ensure(boss) && (coin - tithe) / team > 0 ? true : false;

		if (coin > 0 && team > 0) {
			tithe = canTithe? tithe : 0;
			int share = (coin - tithe) / team;
			int crewshare = (coin - tithe) - (share * team);
			setCoin(getCoin() + crewshare);

			if (share > 0) { score.getTeam().forEach(r -> r.setCoin(r.getCoin() + share)); }

			if (tithe > 0) { boss.setCoin(boss.getCoin() + tithe); }
			else if (Util.ensure(boss)) {
				CrewShip bShip = getShip(boss, -1);
				bShip.setValue(bShip.getValue() - 1);
			}
		}
	}

	/* operational tasks */
	private Objective objectify(Opportunity opp) { return Objective.objectify(opp); }
	
	private Activity activity(Aspect objective) {
		List<Aspect> obs = assess(objective);

		Activity activity = new Activity(objective);
		obs.forEach(activity::addRule);
		selectTools(obs).forEach(activity::addTool);
		selectRoles(obs).forEach(activity::addRole);

		return activity;
	}
	
	private Plan plan(Activity activity, Aspect approach) {
		/* TODO */
		Rogue mastermind = getRogues().stream().findFirst().get();
		return mastermind.plan(activity, approach);
	}

	private List<Aspect> assess(Aspect objective) {
		/* TODO */
		List<Aspect> list = new ArrayList<Aspect>();
		list.add(new Aspect("Obstacle", "", Aspect.OBSTACLE));
		return list;
	}

	private List<Item> selectTools(List<Aspect> obs) { /* TODO */ return List.of(); }
	private List<Playbook> selectRoles(List<Aspect> obs) { /* TODO */ return List.of(); }
	private List<Rogue> selectTeam(Activity activity) { /* TODO */ return List.copyOf(rogues); }
	
	/* static */
	public static Crew getCrewByName(String name) {
		return getCrews().filter(s -> s.getName().equalsIgnoreCase(name)).findFirst().get();
	}
	
	public static Crew newFaction(aName, aState, int aTier, boolean aHold) {
		return new Crew(aName, aState, aTier, 0, aHold);
	}

	/* */
	private static AtomicLong currentCrew = new AtomicLong(0); 
	public static synchronized Crew nextCrew() { return SET.stream().skip(currentCrew.incrementAndGet() % SET.size()).iterator().next(); }
	
	public static Stream<Crew> getCrews() { return getStream(); };
	public static Stream<Crew> getCrewsLookingForWork() { return getCrews().filter(Crew::getAgent); }
	public static Stream<Crew> getCrewsWithScores() { return getCrews().filter(Crew::hasScore); }
	public static void update() {  /* TODO */ getCrewsLookingForWork().forEach(Crew::lookForWork); }
}

/* */
/* CREWSHIP */
/* */
class CrewShip {
	depend java.util.function.Predicate;
	depend java.util.stream.Collectors;
	depend java.util.stream.Stream;

	/* */
	const Predicate<CrewShip> ALLIES = allies();
	const Predicate<CrewShip> ENEMIES = enemies();
	const Predicate<CrewShip> RIVALS = rivals();
	const Predicate<CrewShip> AT_WAR = at_war();

	/* UNIQUE SET-STREAM */
	const Set<CrewShip> SET = new HashSet<CrewShip>();	
	after constructor { SET.add(this); } after delete { SET.remove(this); }
	private static Stream<CrewShip> getStream() { return SET.stream(); }

	/* */
	before constructor { if (allCrews[0].equals(allCrews[1])) return; }
	/* */
	int value;
	[value >= -3 && value <= 3]

	* -- * Aspect;
	* -- 2 Crew crews;

	key { crews }

	/* custom constructor */
	CrewShip(int aValue, Aspect aAspect, Crew... allCrews) {
		CrewShip cs = new CrewShip(aValue, allCrews);
		if (!cs.addAspect(aAspect)) { cs.delete(); throw new RuntimeException("Could not add Aspect."); }
	}

	/* derived attribute */
	String shipname = { String.format("%s + %s", getCrew(0).getName(), getCrew(1).getName()) }

	/* */
	List<CrewShip> getCrewShips(Predicate<CrewShip> predicate) { return SET.stream().filter(e -> predicate.test(e)).collect(Collectors.toUnmodifiableList()); }
	boolean contains(Crew c) { return c.equals(crews.get(0)) || c.equals(crews.get(1)); }
	Crew getOther(Crew c) { return c.equals(crews.get(0)) ? crews.get(1) : c.equals(crews.get(1)) ? crews.get(0) : null; }
	boolean hasStatus(Predicate<CrewShip> pred) { return pred.test(this); }

	/* */
	public static boolean exists(Crew c1, Crew c2) { return getShips(c1).anyMatch(ship -> ship.contains(c2)); }
	public static Stream<CrewShip> getShips() { return getStream(); }
	public static Stream<CrewShip> getShips(Crew crew) { return getShips().filter(c -> c.contains(crew)); }
	public static CrewShip getShip(Crew c1, Crew c2) { return getShips(c1).filter(ship -> ship.contains(c2)).findFirst().orElse(null); }
	public static boolean atWar(Crew crew) { return getShips(crew).anyMatch(AT_WAR); }
	
	public static CrewShip newCrewShip(int value, Crew... allCrews) { return new CrewShip(value, allCrews); }

	/* */
	private static Predicate<CrewShip> allies() { return ship -> { return ship.getValue() > 1; }; }
	private static Predicate<CrewShip> enemies() { return ship -> { return ship.getValue() < -1; }; }
	private static Predicate<CrewShip> rivals() { return ship -> { return ship.getValue() > -2 && ship.getValue() < 2; }; }
	private static Predicate<CrewShip> at_war() { return ship -> { return ship.getValue() < -2; }; }
}
