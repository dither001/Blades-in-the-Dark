strictness allow 1008;

namespace com.blades.util;

/* */
/* DICE */
/* */
class Dice {
	const CRITICAL = "critical"; const SUCCESS = "success"; const PARTIAL = "partial"; const FAILURE = "failure";
}

/* */
/* LISTS */
/* */
class Lists {
	singleton;
	
	depend java.util.ArrayList;

	/* */
	public static <T> ArrayList<T> newArrayList() {
		return new ArrayList<T>();
	}
}

/* */
/* LOADER */
/* */
class Loader {
	singleton;
	
	depend java.util.function.Function;

	depend com.blades.main.Crew;
	depend com.blades.main.CrewShip;
	depend com.blades.main.Locale;
	depend com.blades.main.Rogue;
	depend com.blades.main.Zoning;

	after constructor {
		loadDistricts("res/data/doskvol_districts.csv");
		loadFactions("res/data/doskvol_factions.csv");
		loadCrewShips("res/data/doskvol_crewships.csv");
		/* loadContacts("res/data/crew_contacts.csv"); */
		/* loadContacts("res/data/rogue_contacts.csv"); */
	}
	
	private static void loadDistricts(String path) {
		Util.fileTransformer(path, new Function<String, Locale>() {
			@Override
			public Locale apply(String t) {
				return new Locale(Util.nextUUID(), t);
			}
		});
	}
	
	private static void loadFactions(String path) {
		Util.fileTransformer(path, new Function<String, Crew>() {
			@Override public Crew apply(String t) {
				String[] a = t.split(",");
				Crew c = Crew.newFaction(
					Util.nextUUID(), 
					a[0], 
					Integer.parseInt(a[1]), 
					Boolean.parseBoolean(a[2])
				);
				
				if (a[3] != "") {
					Locale l = new Locale(Util.nextUUID(), a[3]);
					l.setZoning(new Zoning(a[5]));
					if (a[4] != "") { l.setParent(Locale.getLocaleByName(a[4])); }
					l.setCrew(c);
					l.setIsLair(true);
				}
				return c;
			}
		});
	}
	
	private static void loadCrewShips(String path) {
		Util.fileTransformer(path, new Function<String, CrewShip>() {
			@Override
			public CrewShip apply(String t) {
				String[] a = t.split(",");
				Crew c1 = Crew.getCrewByName(a[0]);
				Crew c2 = Crew.getCrewByName(a[1]);
				int status = Boolean.parseBoolean(a[2]) ? -2 : 2;
				return new CrewShip(Util.nextUUID(), status, c1, c2);
			}
		});
	}
	
	private static void loadContacts(String path) {
		Util.fileTransformer(path, new Function<String, Rogue>() {
			@Override public Rogue apply(String t) {
				String[] a = t.split(",");
				return Rogue.newContact(Util.nextUUID(), a[0]);
			}
		});
	}
}

/* */
/* SETS */
/* */
class Sets {
	singleton;
	
	depend java.util.HashSet;

	/* */
	public static <T> HashSet<T> newHashSet() {
		return new HashSet<T>();
	}
}

/* */
/* UTIL */
/* */
class Util {
	singleton;
	
	depend java.io.BufferedReader;
	depend java.io.File;
	depend java.io.FileReader;
	depend java.util.Optional;
	depend java.util.UUID;
	depend java.util.function.Function;
	depend java.util.stream.Stream;
	
	/* */
	public static <T> boolean ensure(T quality) {
		return quality == null ? false
			: quality.getClass().equals(Boolean.class) 
			? ((Boolean) quality).booleanValue()
			: quality.getClass().equals(Optional.class) 
			? ((Optional<?>) quality).isPresent() 
			: true;
	}
	
	public static <T> Stream<T> fileTransformer(String pathname, Function<String, T> func) {
		Stream.Builder<T> builder = Stream.builder();
		try (BufferedReader buffer = new BufferedReader(new FileReader(new File(pathname))) ) { 
			String line;
			while (Util.ensure(line = buffer.readLine())) { builder.accept(func.apply(line)); }
		} catch (Exception e) { e.printStackTrace(); return null; }
		
		return builder.build();
	}
	
	public static UUID nextUUID() { return UUID.randomUUID(); }
	
	public static <T> boolean unless(T quality) { return ! ensure(quality); }
}