strictness allow 1008;

namespace com.blades.util;

/* */
/* DICE */
/* */
class Dice {
	const CRITICAL = "critical"; const SUCCESS = "success"; const PARTIAL = "partial"; const FAILURE = "failure";
}

/* */
/* LISTS */
/* */
class Lists {
	singleton;
	
	depend java.util.ArrayList;

	/* */
	public static <T> ArrayList<T> newArrayList() {
		return new ArrayList<T>();
	}
}

/* */
/* LOADER */
/* */
class Loader {
	singleton;
	
	depend java.util.function.Function;

	depend com.blades.main.*;

	after constructor {
		loadCrewAspects("res/data/crew_aspects.csv");
		loadBuildings("res/data/doskvol_common_buildings.csv");
		loadDistricts("res/data/doskvol_districts.csv");
		loadFactions("res/data/doskvol_factions.csv");
		loadCrewShips("res/data/doskvol_crewships.csv");
		loadContacts("res/data/rogue_names.csv", null);
		loadContacts("res/data/crew_contacts.csv", Aspect.CONTACT);
		loadContacts("res/data/rogue_contacts.csv", Aspect.CONTACT);
	}

	private static void loadBuildings(String path) {
		Util.fileTransformer(path, new Function<String, String>() {
			@Override public String apply(String t) { return t; }
		}).forEach(Locale.COMMON_BUILDINGS::add);
	}

	private static void loadContacts(String path, String aspect) {
		Util.fileTransformer(path, new Function<String, Rogue>() {
			@Override public Rogue apply(String t) {
				String[] a = t.split(",");
				Rogue r = new Rogue(a[0], Crew.nextCrew());
				if (Util.ensure(aspect)) r.addAspect(new Aspect(aspect, aspect, aspect));
				return r;
			}
		});
	}

	private static void loadCrewAspects(String path) {
		Util.fileTransformer(path, new Function<String, Aspect>() {
			@Override public Aspect apply(String t) {
				String[] a = t.split(",");
				return new Aspect(a[0], "", a[1]);
			}
		});
	}

	private static void loadDistricts(String path) {
		Util.fileTransformer(path, new Function<String, Locale>() {
			@Override
			public Locale apply(String t) {
				String[] a = t.split(",");
				Locale l = new Locale(a[0]);
				l.setWealth(Integer.parseInt(a[1]));
				l.setSecurity(Integer.parseInt(a[2]));
				l.setCrime(Integer.parseInt(a[3]));
				l.setOccult(Integer.parseInt(a[4]));
				l.setIsDistrict(true);
				Locale.DISTRICTS.add(l);
				return l;
			}
		});
	}

	private static void loadFactions(String path) {
		Util.fileTransformer(path, new Function<String, Crew>() {
			@Override public Crew apply(String t) {
				String[] a = t.split(",");
				Crew c = Crew.newFaction(
					a[0],
					a[1],
					Integer.parseInt(a[2]),
					Boolean.parseBoolean(a[3])
				);

				c.setAgent(Boolean.parseBoolean(a[7]));

				if (a[4] != "") {
					Locale l = new Locale(a[4]);
					l.setZoning(new Zoning(a[6]));
					if (a[5] != "") { l.setParent(Locale.getLocaleByName(a[5])); }
					else { l.setParent(Locale.nextDistrict()); }
					l.setCrew(c);
					l.setIsLair(true);
					if (a[4].matches("neighborhood")) { l.setIsNeighborhood(true); }
				}
				return c;
			}
		});
	}

	private static void loadCrewShips(String path) {
		Util.fileTransformer(path, new Function<String, CrewShip>() {
			@Override
			public CrewShip apply(String t) {
				String[] a = t.split(",");
				Crew c1 = Crew.getCrewByName(a[0]);
				Crew c2 = Crew.getCrewByName(a[1]);
				int status = Boolean.parseBoolean(a[2]) ? -2 : 2;

				return new CrewShip(status, c1, c2);
			}
		});
	}
}

/* */
/* SETS */
/* */
class Sets {
	singleton;
	
	depend java.util.HashSet;

	/* */
	public static <T> HashSet<T> newHashSet() {
		return new HashSet<T>();
	}
}

/* */
/* UTIL */
/* */
class Util {
	singleton;
	
	depend java.io.BufferedReader;
	depend java.io.File;
	depend java.io.FileReader;
	depend java.util.Optional;
	depend java.util.UUID;
	depend java.util.function.Function;
	depend java.util.stream.Stream;
	
	/* */
	public static void testEnsure() {
		System.out.println("Test ensure() utility:");
		System.out.println(String.format("> %-8s null", Util.ensure("")));
		System.out.println(String.format("> %-8s 0", Util.ensure(0)));
		System.out.println(String.format("> %-8s -1", Util.ensure(-1)));
		System.out.println(String.format("> %-8s Optional(null)", Util.ensure(Optional.ofNullable(null))));
		System.out.println(String.format("> %-8s Optional(true)", Util.ensure(Optional.of(true))));
		System.out.println(String.format("> %-8s Optional(false)", Util.ensure(Optional.of(false))));
		System.out.println(String.format("> %-8s 'empty' Optional", Util.ensure(Optional.empty())));
		System.out.println(String.format("> %-8s 'empty' String \"\"", Util.ensure("")));
		System.out.println(String.format("> %-8s String \"foo\"", Util.ensure("foo")));
	}
	
	/* */
	public static <T> boolean ensure(T quality) {
		return quality == null ? false
			: quality.getClass().equals(Boolean.class) 
			? ((Boolean) quality).booleanValue()
    		: quality.getClass().equals(Integer.class) 
    		? ((int)quality) > -1
			: quality.getClass().equals(Optional.class) 
			? ((Optional<?>) quality).isPresent() 
			: quality.getClass().equals(String.class) 
			? !((String) quality).matches("") 
			: true;
	}
	
	public static <T> Stream<T> fileTransformer(String pathname, Function<String, T> func) {
		Stream.Builder<T> builder = Stream.builder();
		try (BufferedReader buffer = new BufferedReader(new FileReader(new File(pathname))) ) { 
			String line;
			while (Util.ensure(line = buffer.readLine())) { builder.accept(func.apply(line)); }
		} catch (Exception e) { e.printStackTrace(); return null; }
		
		return builder.build();
	}
	
	public static UUID nextUUID() { return UUID.randomUUID(); }
	
	public static <T> boolean unless(T quality) { return ! ensure(quality); }
}