strictness allow 46;
strictness allow 1007;
strictness allow 1008;

use blades_crews.ump;
use blades_rogues.ump;
use blades_scores.ump;
use suppliers.ump;
use util.ump;

namespace com.blades.main;

/* */
/* ASPECT */
/* */
class Aspect {
	depend java.util.ArrayList;
	depend java.util.Collections;
	depend java.util.List;
	depend java.util.function.Predicate;
	depend java.util.stream.Collectors;
	depend java.util.stream.Stream;

	depend com.blades.util.Util;

	/* */
	const CONTACT = "contact"; const EXPERT = "expert"; const GANG = "gang"; 
	const HOOK = "hook";
	const REPUTATION = "reputation";
	const VICE = "vice";
	const UPGRADE = "upgrade";
	/* */
	const ZONING = "zoning";
	const APPROACH = "approach"; const PLAYBOOK = "playbook"; const RATING = "rating";
	const OBJECTIVE = "objective"; const OBSTACLE = "obstacle";

	/* */
	const Set<Aspect> SET = new HashSet<Aspect>();
	after constructor { SET.add(this); }
	after delete { SET.remove(this); }
	public static Stream<Aspect> getStream() { return SET.stream(); }

	/* */
	name; description; type;

	key { name, type }

	/* */
	public static Predicate<Aspect> filter(String type) { return (Aspect a) -> Util.ensure(a.getType()) ? a.getType().matches(type) : false; }
	public static Stream<Aspect> get(Predicate<Aspect> predicate) { return getStream().filter(a -> predicate.test(a)); }

	public static List<Aspect> getContacts() { return get(filter(CONTACT)).collect(Collectors.toUnmodifiableList()); }
	public static List<Aspect> getReputations() { return get(filter(REPUTATION)).collect(Collectors.toUnmodifiableList()); }
	public static List<Aspect> getUpgrades() { return get(filter(UPGRADE)).collect(Collectors.toUnmodifiableList()); }	
}

/* */
/* CREW-ROGUE SHIP */
/* */
associationClass CrewRogueShip {
	value;

	* Crew;
	* Rogue;
}

/* */
/* GAME CONTEXT */
/* */
class GameContext {
	singleton;
	
	long turn = 0L;
}

/* */
/* GAME LOOP */
/* */
class GameLoop {
	singleton;
	
	depend java.util.Arrays;
	depend java.util.List;
	depend java.util.stream.Collectors;
	
	depend com.blades.util.Util;
	
	/* */
	GameContext context = com.blades.main.GameContext.getInstance();
	internal List<Runnable> r = Arrays.asList(this::untap, this::upkeep, this::draw, this::main, this::combat, this::main2, this::cleanup);

	/* static */
	public static void main(String...args) {

		/* */
		GameLoop.initialize();

		/* */
		// while (true) { GameLoop.getInstance().r.stream().forEach(Runnable::run); }
		for (int i = 0; i < 5; ++i) GameLoop.getInstance().r.stream().forEach(Runnable::run);
		
		// testCrewships();
	}

	/* */
	private static void initialize() {
		com.blades.util.Loader.getInstance();
		Crew.initialize();
		Ladder.initialize();
		Rogue.setupRogueShips();

		System.out.println("Total Rogues: " + Rogue.getRogues().count());
		System.out.println("Total 'ships: " + RogueShip.getRogueShips().count());
		System.out.println("Total Crews: " + Crew.getCrews().count());
		System.out.println("Total places: " + Locale.getPlaces().count());
	}

	private static void afterScoreReport() {
		Crew.getCrews().filter(e -> e.getRep() > 0).forEach(e -> {
			System.out.println(String.format("%s (tier: %s (hold: %s) rep: %s, coin: %s, heat: %s, wanted: %s) ", 
					e.getName(), e.getCurrentTier(), e.getCurrentHold(), e.getRep(), e.getCoin(), e.getHeat(), e.getWanted()));
			e.getRogues().forEach(f -> {
				System.out.println(String.format("> %s (coin: %s, stash: %s, ships: %s)", 
					f.getRoguename(), f.getCoin(), f.getStash(), f.numberOfRogueShips()));
			});
		});
	}

	private static void testCrew() {
		Crew.getCrews().forEach(e -> {
			System.out.println(String.format("(%2d) %s", e.numberOfRogues(), e.getName()));
			e.getRogues().forEach(f -> {
				System.out.println(String.format("%s %s", f.getRoguename(),
						f.getRogueShips().stream().map(g -> g.getOther(f).getRoguename()).collect(Collectors.toList())));
			});
		});
	}

	private static void testCrewRogues() {
		Crew.getCrews().forEach(e -> {
			System.out.println(String.format("(%2d) %s", e.numberOfRogues(), e.getName()));
			e.getRogues().forEach(f -> System.out.println("> " + f.getRoguename()));
		});
		
		Crew.getCrews().forEach(e -> System.out.println(e.getCrewRogueShips().stream().map(s -> s.getRogue().getRoguename()).collect(Collectors.toList())));
	}

	private static void testCrewShips() {
		Crew.getCrews().forEach(e -> {
			System.out.println(String.format("%s (ships: %d)", e.getName(), e.numberOfCrewShips()));
			e.getCrewShips().forEach(f -> {
				System.out.println(String.format("- (%2d) %s", f.getValue(), f.getShipname()));
			});
		});
	}

	private static void testRogueShips() {
		Rogue.getRogues().forEach(e -> {
			System.out.println(String.format("%s %s", e.getRoguename(),
					e.getRogueShips().stream().map(f -> f.getOther(e).getRoguename()).collect(Collectors.toList())));
		});
	}

	private static void testLadders() {
		Locale.getDistricts().map(d -> Ladder.getWithDistrict(d)).forEach(e -> {
			System.out.println(
				String.format("%s (%d : %s [%d]): %s", 
					e.getDistrict().getName(), 
					e.getBoss().getTier(), 
					e.getBoss().getName(), 
					e.getBoss().numberOfCrewShips(), 
					e.getCrews().stream().map(Crew::getName).collect(Collectors.toUnmodifiableList()
				)
			));
		});
	}

	private static void testScore() {
		Situation sitch = Situation.getSituations().filter(s -> {
			return Util.ensure(s.getShip().getRogue(0).getCrew().getLair());
		}).findFirst().get();
		System.out.println(sitch.getShip().getShipname());

		Crew target = sitch.getShip().getRogue(0).getCrew();
		System.out.println(target.getName());

		Locale locale = target.getLair();
		System.out.println(locale.getName());

		Opportunity opp = new Opportunity(target, locale, sitch);
	}

	/* */
	/* GAME STATE MACHINE */
	/* */
	before setSequence { 
		System.out.println("--> Began phase: " + aSequence.name()); 
	}
	
	/* game state machine */
	sequence {
		Untap { untap -> /{
			System.out.println(String.format("Started turn %d", context.getTurn()));
		} Upkeep; }
		Upkeep { upkeep -> /{
			Opportunity.update();
		} Draw; }
		Draw { draw -> /{
			Crew.update();
		} Main; }
		Main { main -> /{
			Crew.getCrewsWithScores().limit(6).forEach(c -> c.getScore().run());
		} Combat; }
		Combat { combat -> /{
		} Main2; }
		Main2 { main2 -> /{
		} Cleanup; }
		Cleanup { cleanup -> /{
			Fiasco.update();
			context.setTurn(context.getTurn() + 1);
		} Untap; }
	}
	
	
}

/* */
/* ITEM */
/* */
class Item {}

/* */
/* LADDER */
/* */
class Ladder {
	depend java.util.stream.Collectors;
	depend java.util.stream.Stream;
	
	depend com.blades.util.Util;

	/* */
	0..1 -- 0..* Crew;

	/* */
	unique Locale district; 
	Crew boss;

	key { district }

	/* */
	public static void initialize() { 
		Locale.getDistricts().forEach(e -> laddersByDistrict.put(e, new Ladder(e, null)));

		Crew.getCrews().flatMap(c -> c.getHuntingGround().stream())
				.forEach(g -> Ladder.getWithDistrict(g.getParent()).addCrew(g.getCrew()));

		laddersByDistrict.values().stream().forEach(e -> {
			e.setBoss(e.getCrews().stream().max(Comparator.comparingInt(Crew::getTier)).get());
		});

		laddersByDistrict.values().forEach(e -> {
			Crew boss = e.getBoss();
			e.getCrews().forEach(crew -> {
				if (Util.unless(crew.equals(boss)) && Util.unless(CrewShip.exists(crew, boss))) { new CrewShip(0, boss, crew); }
			});
		});
	}

	/* */
	public static Stream<Ladder> getLadders() { return laddersByDistrict.values().stream(); }
}

/* */
/* LOCALE */
/* */
class Locale {
	depend java.util.HashSet;
	depend java.util.Set;
	depend java.util.stream.Collectors;
	depend java.util.stream.Stream;

	depend com.blades.util.Util;

	/* */
	public static final List<String> COMMON_BUILDINGS = Collections.synchronizedList(new ArrayList<String>());
	public static final List<String> UNCOMMON_BUILDINGS = Collections.synchronizedList(new ArrayList<String>());
	public static final List<Locale> DISTRICTS = Collections.synchronizedList(new ArrayList<Locale>());

	/* UNIQUE SET-STREAM */
	const Set<Locale> SET = new HashSet<Locale>();	
	after constructor { SET.add(this); } after delete { SET.remove(this); }
	private static Stream<Locale> getStream() { return SET.stream(); }

	/* */
	lazy UUID id; before getId { if (Util.unless(id)) setId(Util.nextUUID()); } key { id }
	name;

	/* */
	lazy int wealth; lazy int security; lazy int crime; lazy int occult;
	boolean isDistrict = false; boolean isNeighborhood = false;
	boolean isLair = false; boolean isHuntingGround = false; boolean isTurf = false;
	lazy Zoning zoning;

	0..1 parent -- * Locale children;

	boolean hasZoning = { zoning != null }

	/* */
	public static Stream<Locale> getLocales() { return getStream(); }
	public static Stream<Locale> getDistricts() { return getLocales().filter(Locale::getIsDistrict); }
	public static Stream<Locale> getPlaces() { return getLocales().filter(Locale::hasParent); }
	public static Locale getLocaleByName(String name) {
		return getLocales().filter(l -> l.getName().matches(name)).findFirst().get();
	}

	/* */
	public static Stream<Ladder> getLadders() { return Ladder.getLadders(); }

	/* */
	public static synchronized String nextCommonBuilding() { String l = COMMON_BUILDINGS.remove(0); COMMON_BUILDINGS.add(l); return l; }
	public static synchronized String nextUncommonBuilding() { String l = UNCOMMON_BUILDINGS.remove(0); UNCOMMON_BUILDINGS.add(l); return l; }
	public static synchronized Locale nextDistrict() { Locale l = DISTRICTS.remove(0); DISTRICTS.add(l); return l; }
}

/* */
/* PLAYBOOK */
/* */
class Playbook {
	const CUTTER = "cutter"; const HOUND = "hound"; const LEECH = "leech"; const LURK = "lurk"; const SLIDE = "slide"; const SPIDER = "spider"; const WHISPER = "whisper";
	
	isA Aspect;
	Playbook(aName) { super(aName, "", Aspect.PLAYBOOK); }
}

/* */
/* PLAYSPACE */
/* */


class PlaySpace {
	internal boolean visitedA = false;
	internal boolean visitedB = false;
	internal boolean visitedM = false;
	internal boolean visitedN = false;

	encounter {
		Start {
			chooseA -> /{ visitedA = true; } A;
			chooseB -> /{ visitedB = true; } B;
		} A {
		chooseB [visitedB != true] -> B;
		chooseC -> C;
		chooseF -> F;
     } B {
		chooseA [visitedA != true] -> A;
		chooseD -> D;
		chooseG -> G;
     } C {
		chooseK -> K;
     } D {
		chooseL -> L;
     } final E {
     	/* TODO */
     } F {
		chooseE -> E;
		chooseM -> /{ visitedM = true; } M;
     } G {
		chooseJ -> J;
		chooseN -> /{ visitedN = true; } N;
     } final J {
     	/* TODO */
     } K {
		chooseM -> /{ visitedM = true; } M;
     } L {
		chooseN -> /{ visitedN = true; } N;
     } M {
		chooseN [visitedN != true] -> /{ visitedN = true; } N;
		objective -> Objective;
     } N {
		chooseM [visitedM != true] -> /{ visitedM = true; } M;
		objective -> Objective;
     } final Objective {
     	/* TODO */
     }
  }
}

/* */
/* RATING */
/* */
class Rating {
	depend java.util.concurrent.ArrayBlockingQueue;
	depend java.util.concurrent.BlockingQueue;

	const ATTUNE = "attune"; const COMMAND = "command";
	const CONSORT = "consort"; const FINESSE = "finesse";
	const HUNT = "hunt"; const PROWL = "prowl";
	const SKIRMISH = "skirmish"; const STUDY = "study";
	const SURVEY = "survey"; const SWAY = "sway";
	const TINKER = "tinker"; const WRECK = "wreck";

	/* */
	const BlockingQueue<String> QUEUE = new ArrayBlockingQueue<String>(12);

	/* */
	isA Aspect;
	Rating(aName) { super(aName, "", Aspect.RATING); }

	/* */	
	public static synchronized Rating next() {
		if (QUEUE.isEmpty()) { QUEUE.addAll(Arrays.asList(ATTUNE, COMMAND, CONSORT, FINESSE, HUNT, PROWL, SKIRMISH, STUDY, SURVEY, SWAY, TINKER, WRECK)); }
		String rating = QUEUE.poll(); QUEUE.add(rating); return new Rating(rating);
	}
}

/* */
/* ZONING */
/* */
class Zoning {
	/* work, play, movement, waiting, rest */
	const PURPOSE = "purpose"; const RULESPACE = "rulespace"; const PROFESSIONAL = "professional"; const PERSONAL = "personal";

	isA Aspect;
	Zoning(aName) { super(aName, "", Aspect.ZONING); }

	/* instance */
	boolean isPublic = { getName().matches(PURPOSE) || getName().matches(RULESPACE) }
	boolean isPrivate = { getName().matches(PROFESSIONAL) || getName().matches(PERSONAL) }
}
