
namespace com.blades.main;

/* */
/* ROGUE */
/* */
class Rogue {
	depend java.util.function.Predicate;
	depend java.util.stream.Collectors;
	depend java.util.stream.Stream;

	depend com.blades.util.Util;

	/* UNIQUE SET-STREAM */
	const Set<Rogue> SET = new HashSet<Rogue>();	
	after constructor { SET.add(this); } after delete { SET.remove(this); }
	private static Stream<Rogue> getStream() { return SET.stream(); }

	/* */
	lazy UUID id; before getId { if (Util.unless(id)) setId(Util.nextUUID()); } key { id }
	roguename;
	int stress = 0; int coin = 0; int stash = 0;
	boolean tapped = false; boolean inPrison = false;

	0..1 -> 0..* Aspect aspects;
	
	/* aspect-oriented */
	after setCoin {
		if (coin > 4) { int store = coin - 4; stash += store; coin -= store; }
	}
	
	/* */
	Plan plan(Activity activity, Aspect approach) { return new Plan(activity, approach, this); }
	
	boolean arrest(Prison prison) {
		boolean arrest = false;
		if (Util.unless(getInPrison())) {
			setInPrison(true);
			prison.addPrisoner(this);
			arrest = true;
		}

		return arrest;
	}

	/* setup */
	public static void setupRogueShips() {
		int numRogues = (int) Rogue.getRogues().count();

		Rogue[] a = getRogues().toArray(Rogue[]::new);
		for (int i = 1; i < numRogues; i += 2) {
			a[i].getShip(a[(i + 1) % numRogues], RogueShip.ALLY);
			a[i].getShip(a[(i - 1) % numRogues], RogueShip.ENEMY);
		}
	}

	/* instance */
	void applyHarm(Harm harm) {
		int[] tier = {0, 0, 0, 0, 0};
		getAspects(a -> a.getType().matches(Aspect.HARM)).forEach(e -> ++tier[((Harm) e).getLevel()]);
		harmHelper(tier, harm);
	}

	private int[] harmHelper(int[] array, Harm harm) {
		int level = harm.getLevel();
		if (level == 3 && array[level] > 0) { harm.setLevel(level+1); return harmHelper(array, harm); } 
		else if (level < 3 && array[level] > 1) { harm.setLevel(level+1); return harmHelper(array, harm); } 
		else { array[level] += 1; addAspect(harm); }

		return array;
	}

	Stream<Aspect> getAspects(Predicate<Aspect> predicate) { return getAspects().stream().filter(predicate); }

	List<Rogue> getCircle() { return getRogueShips().stream().map(s -> s.getOther(this)).collect(Collectors.toUnmodifiableList()); }
	RogueShip getShip(Rogue rog, value) {
		return getRogueShips().stream().filter(ship -> ship.contains(rog)).findFirst().orElse(RogueShip.newRogueShip(value, this, rog));
	}
	boolean hasShip(Rogue rog) { return Util.ensure(getRogueShips().stream().anyMatch(ship -> ship.contains(rog))); }

	Opportunity lookForWork() {
		Rogue other = getRogueShips().stream().findFirst().get().getOther(this); if (Util.unless(other)) return null;
		Situation sitch = Situation.getSituations(other).filter(s -> Util.unless(s.getShip().contains(this))).findFirst().get(); if (Util.unless(sitch)) return null;
		Crew target = sitch.getShip().getOther(other).getCrew(); if (Util.unless(target)) return null;
		Locale locale = crew.getHuntingGround().stream().findFirst().get(); if (Util.unless(locale)) return null;

		return new Opportunity(target, locale, sitch);
	}

	void doDowntime(int actions) { setTapped(false); }

	/* static */
	public static Stream<Rogue> getRogues() { return getStream(); }
	public static Stream<Rogue> getAvailableRogues() {
		return getRogues().filter(Predicate.not(Rogue::getTapped).and(Predicate.not(Rogue::getInPrison)));
	}
}

/* */
/* ROGUESHIP */
/* */
class RogueShip {
	depend java.util.function.Predicate;
	depend java.util.stream.Stream;

	const Predicate<RogueShip> ALLIES = allies();
	const Predicate<RogueShip> CONTACTS = contacts();
	const Predicate<RogueShip> ENEMIES = enemies();
	const Predicate<RogueShip> RIVALS = rivals();

	/* */
	const ALLY = "ally"; const CONTACT = "contact"; const ENEMY = "enemy"; const RIVAL = "rival";

	/* UNIQUE SET-STREAM */
	const Set<RogueShip> SET = new HashSet<RogueShip>();	
	after constructor { SET.add(this); } after delete { SET.remove(this); }
	private static Stream<RogueShip> getStream() { return SET.stream(); }

	/* */
	value = RIVAL;

	* <@>- 2 Rogue rogues;

	key { rogues }

	/* */
	shipname = { String.format("%s + %s", rogues.get(0).getRoguename(), rogues.get(1).getRoguename()) }

	/* */
	Situation createSituation(Aspect aspect) { return Situation.newSituation(this, aspect); }
	
	boolean contains(Rogue c) { return c.equals(rogues.get(0)) || c.equals(rogues.get(1)); }
	Rogue getOther(Rogue c) { return c.equals(rogues.get(0)) ? rogues.get(1) : c.equals(rogues.get(1)) ? rogues.get(0) : null; }
	
	/* */
	public static Stream<RogueShip> getRogueShips() { return getStream(); }
	public static Stream<RogueShip> getRogueShips(Predicate<RogueShip> predicate) {
		return getRogueShips().filter(ship -> predicate.test(ship));
	}
	
	public static RogueShip newRogueShip(String value, Rogue... allRogues) {
		RogueShip ship = new RogueShip(allRogues);
		ship.setValue(value);
		return ship;
	}

	/* */
	private static Predicate<RogueShip> allies() { return ship -> { return ship.getValue().matches(ALLY); }; }
	private static Predicate<RogueShip> contacts() { return ship -> { return ship.getValue().matches(CONTACT); }; }
	private static Predicate<RogueShip> enemies() { return ship -> { return ship.getValue().matches(ENEMY); }; }
	private static Predicate<RogueShip> rivals() { return ship -> { return ship.getValue().matches(RIVAL); }; }
}

/* */
/* TRAUMA */
/* */
class Trauma {
	depend java.util.concurrent.ArrayBlockingQueue;
	depend java.util.concurrent.BlockingQueue;

	/* */
	const COLD = "cold"; const HAUNTED = "haunted"; 
	const OBSESSED = "obsessed"; const PARANOID = "paranoid"; 
	const RECKLESS = "reckless"; const SOFT = "soft"; 
	const UNSTABLE = "unstable"; const VICIOUS = "vicious";

	isA Aspect;
	Trauma(aName) { super(aName, "", Aspect.TRAUMA); }

	/* */
	const BlockingQueue<String> QUEUE = new ArrayBlockingQueue<String>(8);

	/* */	
	public static synchronized Trauma next() {
		if (QUEUE.isEmpty()) { QUEUE.addAll(Arrays.asList(COLD, HAUNTED, OBSESSED, PARANOID, RECKLESS, SOFT, UNSTABLE, VICIOUS)); }
		String aspect = QUEUE.poll(); QUEUE.add(aspect); return new Trauma(aspect);
	}
}

/* */
/* VICE */
/* */
class Vice {
	depend java.util.concurrent.ArrayBlockingQueue;
	depend java.util.concurrent.BlockingQueue;

	/* */
	const FAITH = "faith"; const GAMBLING = "gambling"; 
	const LUXURY = "luxury"; const OBLIGATION = "obligation"; 
	const PLEASURE = "pleasure"; const STUPOR = "stupor"; 
	const WEIRD = "weird";

	isA Aspect;
	Vice(aName) { super(aName, "", Aspect.VICE); }

	/* */
	const BlockingQueue<String> QUEUE = new ArrayBlockingQueue<String>(7);

	/* */	
	public static synchronized Vice next() {
		if (QUEUE.isEmpty()) { QUEUE.addAll(Arrays.asList(FAITH, GAMBLING, LUXURY, OBLIGATION, PLEASURE, STUPOR, WEIRD)); }
		String aspect = QUEUE.poll(); QUEUE.add(aspect); return new Vice(aspect);
	}
}