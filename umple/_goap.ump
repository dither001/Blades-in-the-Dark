
namespace goap;

external interface Predicate {}

trait TPredicate < T > {
	depend java.util.function.Predicate;
	isA Predicate;
	@Override public boolean test(T t) { return predicate.test(t); }
}

class ActorPredicate {
	depend java.util.function.Predicate;
	isA Predicate;
	isA TPredicate < T = Actor >;
	Predicate<Actor > predicate;
}

/* */
class Action {}

class Actor {}

interface IState { boolean test(); }

associationClass PersonState {
	isA IState;
	isA State < S = Action >;
	* ActorPredicate;
	* Actor;
}

trait State < S > {
	/* BEING relates to achieving some status, often abstract */
	/* HAVING relates to affiliations e.g. race, class, background, culture */
	/* GETTING/PUTTING relates to the acqusition/delivery of physical goods */
	/* DOING relates performance of a process or activity */
	/* GOING relates to transforming (moving to a location) */
	Verb { Being, Having, Getting, Putting, Doing, Going }
	float cost = 1f;
}